#!.venv/bin/python
# Import the Canvas class
from canvasapi import Canvas
from canvasapi.exceptions import ResourceDoesNotExist, InvalidAccessToken, Forbidden
import configparser
import sys,os,signal
import argparse
from pick import pick
import re

debug = False
def printDebug(obj):
    if debug:
        print(obj)


API_URL = None
API_KEY = None
COURSE_PATTERN = None
ASSIGNMENT_PATTERN = None

DOWNLOAD_DIRECTORY = "downloads"
MAX_COURSES = 100

KEY_ESCAPE = 27
QUIT_KEYS = (KEY_ESCAPE, ord("q"), ord("Q"))

def signal_handler(sig, frame):
    print("(Ctrl-C)")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

config_filename = "setup.ini"
def read_config():
    global API_URL, API_KEY
    config = configparser.ConfigParser()
    config.read(config_filename)

    if "setup" in config:
        setup = config["setup"]
    else:
        print(f"{config_filename} missing [setup] section.")
        sys.exit(1)

    if "API_URL" in setup:
        API_URL = setup["API_URL"]
    else:
        print(f"{config_filename} missing API_URL.")
        sys.exit(1)

    if "API_KEY" in setup:
        API_KEY = setup["API_KEY"]
    else:
        print(f"{config_filename} missing API_KEY.")
        sys.exit(1)


def init_args():
    global args

    parser = argparse.ArgumentParser(description='Download attachments from a Canvas course assignment.')
    parser.add_argument('--course-name', '-c', help='Course Code for the course.', required=True)
    parser.add_argument('--assignment-name', '-a', help='Assignment Name to download.', default="")
    parser.add_argument('--anonymous', help='Use anonymous filenames.', action=argparse.BooleanOptionalAction, default=True)

    args = parser.parse_args()

def wildcard_to_regex_pattern(wildcard_pattern):
    # Escape regex metacharacters, except for `*` and `?`
    regex_pattern = re.escape(wildcard_pattern)
    # Replace escaped `*` with `.*` (match zero or more characters)
    regex_pattern = regex_pattern.replace(r'\*', '.*')
    # Replace escaped `?` with `.` (match exactly one character)
    regex_pattern = regex_pattern.replace(r'\?', '.')

    return f'{regex_pattern}'

read_config()
init_args()

COURSE_PATTERN = args.course_name
ASSIGNMENT_PATTERN = args.assignment_name

print("Connecting to Canvas API... ",end="")
# Connect to Canvas API and get the account
try:
    canvas = Canvas(API_URL, API_KEY)
    # account = canvas.get_account(1)
except ResourceDoesNotExist:
    print("Incorrect API_URL.")
    sys.exit(1)
except InvalidAccessToken:
    print("Incorrect API_KEY.")
    sys.exit(1)

print("Connected!")

user = canvas.get_user('self',None)
print(f"Logged in as: {user.name}")

# search for the course.
# the "get_courses()" for a user does not allow a search term,
# so had to implement a search

print(f"Searching by course_code ({COURSE_PATTERN}) : ",end="")

printDebug(f"get_courses()")

# gets all the users courses
courses = canvas.get_courses()

# convert the standard wildcard string to a regex
course_regex_str = wildcard_to_regex_pattern(COURSE_PATTERN)
course_regex = re.compile(course_regex_str)

# converting the pagenated list to a standard python list
courses_list = []
for course in courses:
    if hasattr(course,"name") and course_regex.match(course.name):
        courses_list.append(course)

courses_count = len(courses_list)

if courses_count > MAX_COURSES:
    print(f"Too many results. ({courses_count})")
    sys.exit(1)
    

printDebug(f"Found {courses_count} partial match(es).")

printDebug("checking for exact match")
exact_courses = [course for course in courses_list if course.name == COURSE_PATTERN]

if len(exact_courses) == 1:
    printDebug("found exact match")
    course = exact_courses[0]

elif courses_count == 0:
    print("Not found.")
    sys.exit(1)

else:
    printDebug("select a course")
    title = "Select a Course:"
    course_names = [c.name for c in courses_list]
    result,index = pick(course_names,title, indicator=">", quit_keys=QUIT_KEYS)
    if index < 0:
        print("")
        sys.exit(0)
    course = courses_list[index]

print("Found")
printDebug(f"found course_id: {course.id}")

# search for the assignment.
# we're searching on name which may not be unique and the API allows partial matches
# so we need to loop through the results to see if there is an exact match
print(f"Searching assignments by name ({ASSIGNMENT_PATTERN}) : ",end="")
printDebug(f"\ncourse.assignments()")
assignments = course.get_assignments()
printDebug(assignments[0].__dict__)

# convert the standard wildcard string to a regex
assignment_regex_str = wildcard_to_regex_pattern(ASSIGNMENT_PATTERN)
assignment_regex = re.compile(assignment_regex_str)

# converting the pagenated list to a standard python list
assignment_list = []
for assignment in assignments:
    if hasattr(assignment,"name") and assignment_regex.match(assignment.name):
        assignment_list.append(assignment)

assignments_count = len(assignment_list)

printDebug("finding exact match")
exact_assignments = [assignment for assignment in assignment_list if assignment.name == ASSIGNMENT_PATTERN]
if len(exact_assignments) == 1:
    assignment = exact_assignments[0]

elif assignments_count == 0:
    print("Not found.")
    sys.exit(1)

else:
    title = "Select an Assignment:"
    assignment_names = [a.name for a in assignment_list]
    result,index = pick(assignment_names,title, indicator=">", quit_keys=QUIT_KEYS)
    if index < 0:
        print("")
        sys.exit(0)
    assignment = assignment_list[index]

print("Found")
printDebug(f"found assignment_id: {assignment.id}")

# now we can get the submissions for this assignment
# currently this assumes an assignment has a single attachment
# future: test for multiple submissions and attachments
printDebug("trying to get submissions")
print("Searching for submissions.")
submissions = assignment.get_submissions()

# do a quick count so we can give an idea of how long this will take
submission_count = 0
attachment_count = 0
for submission in submissions:
    submission_count += 1
    attachment_count += len(submission.attachments)
        
print(f"Found {submission_count} submission(s) with {attachment_count} attachment(s).")

printDebug(f"got submissions")

if attachment_count == 0:
    print("Nothing to download.")
    sys.exit()

# now download the files
print("Starting download(s).")
counter = 0
remaining = attachment_count
for submission in submissions:
    printDebug(f"-----\ncounter={counter}")
    for attachment in submission.attachments:
        # generate a "unique" filename
        # this could probably be better
        counter+= 1
        if args.anonymous:
            user_part = ""
        else:
            user_part = f"_u{submission.user_id}"
        local_filename = f"{DOWNLOAD_DIRECTORY}/a{submission.assignment_id}_c{counter:04d}{user_part}_{attachment}"
        
        # now do the actual download
        print(f"({remaining: 4d}) {local_filename}", end="")
        if not debug:
            attachment.download(local_filename)
        remaining -= 1
        
        print("")

print("Download complete.")
print(f"Attachments saved to {os.path.abspath(DOWNLOAD_DIRECTORY)}")

#
# Things to do:
# * option for obscured filenames - handled
# * Can 2 assignments in the same course have the same name
# * Can an assignment have multiple submissions - handled
# * Can a submission have multiple attachments - yes
# * Can 2 attachments by the same person have the same name - handled
